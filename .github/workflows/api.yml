name: API (App Service)

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

jobs:
  deploy-staging:
    if: ${{ github.ref_name == 'staging' }}
    runs-on: ubuntu-latest
    environment: staging
    env:
      WEBAPP_NAME: starlitstories-api-dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with: { dotnet-version: '8.0.x' }

      # --- Detect API .csproj ---
      - name: Detect API project
        run: |
          echo "Searching for *Api.csproj..."
          API_PROJECT=$(git ls-files | grep -E '\.csproj$' | grep -i 'api' | head -n1)
          if [ -z "$API_PROJECT" ]; then
            echo "No *Api.csproj found"; exit 1
          fi
          echo "Found: $API_PROJECT"
          echo "API_PROJECT=$API_PROJECT" >> $GITHUB_ENV

      - name: Restore
        run: dotnet restore "$API_PROJECT"

      - name: Publish
        run: dotnet publish "$API_PROJECT" -c Release -o publish

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to App Service (staging)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          package: publish

  deploy-prod:
    if: ${{ github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    environment: production
    env:
      WEBAPP_NAME: starlitstories-api-prod
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with: { dotnet-version: '8.0.x' }

      - name: Detect API project
        run: |
          echo "Searching for *Api.csproj..."
          API_PROJECT=$(git ls-files | grep -E '\.csproj$' | grep -i 'api' | head -n1)
          if [ -z "$API_PROJECT" ]; then
            echo "No *Api.csproj found"; exit 1
          fi
          echo "Found: $API_PROJECT"
          echo "API_PROJECT=$API_PROJECT" >> $GITHUB_ENV

      - name: Restore
        run: dotnet restore "$API_PROJECT"

      - name: Publish
        run: dotnet publish "$API_PROJECT" -c Release -o publish

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to App Service (prod)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          package: publish
